<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-4.3.xsd
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-4.3.xsd" >
       <!-- 读取属性文件 -->
       <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
       		<property name="location" value="classpath:db.properties"/>
       </bean>
              
       <!-- 配置连接数据库的数据源(dbcp),可以配置多个数据源对象，id不同即可 -->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
       		<property name="driverClassName" value="${driver}" />
       		<property name="url" value="${url}" />
       		<property name="username" value="${username}" />
       		<property name="password" value="${password}" />
       </bean>
       <!-- 配置sqlSessionFactory -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       		<!-- 引用上述数据源 -->
       		<property name="dataSource" ref="dataSource" />
       		<!-- 有些mybatis的配置不想在spring文件写，可以直接引入mybatis文件 -->
       		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
       		<!-- mapper列表可以单独设置 -->
       		 
       		<!-- <property name="mapperLocations">
       			<list>指定mapper文件位置
       				<value>classpath:sqlmap/*.xml</value>通配符匹配
       				<value>classpath*:sqlmap/User.xml</value>此方法可以设置多个，也可以直接用通配符匹配文件夹下所有
       			</list>
       		</property>  -->	
       </bean>
       
       <!-- 配置sqlSessionTemplate -->
       <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
       </bean>
       
       <!-- 创建sqlSession对象 -->
       <bean id="userMapper1" class="dao.impl.UserMapperImpl">
       		<!-- <property name="sqlSession" ref="sqlSessionTemplate" /> -->
       		<!-- 用实现类继承SqlSessionDaoSupport类就不需要创建 SqlSessionTemplate对象了，继承了此对象实例-->
       		<!-- 其继承了sqlSessionFactory属性和通过这个属性获取的sqlSession，直接给sqlSessionFactory属性赋值即可-->
       		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
       </bean>
       
       <!-- 不使用手动设置 UserMapperImpl-->
       <bean id="userMapper2" class="org.mybatis.spring.mapper.MapperFactoryBean">
       	<!--  -->
       		<property name="mapperInterface" value="dao.mapper.UserMapper"></property>
       		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
       </bean>
       
       <!-- 批量生产实现类（实现类不用写了），扫描全部Mapper接口，其id为Mapper接口类名是首字母小写UserMapper.java的id为 userMapper-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       	<!-- mapper为Mapper接口所在的包路径，扫描此包下所有Mapper接口 -->
       		<property name="basePackage" value="dao.mapper"></property>
       </bean>
       
       <!-- 使用注解的方式创建dao和service实例对象 -->
       <context:component-scan base-package="service.impl" />
       
       <!-- 定义事务管理器 -->
       <bean id="txManager" 
       		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       		<property name="dataSource" ref="dataSource" />
       </bean>
       
       <!-- 事物增强 -->
    <!-- 
       <tx:advice id="txAdvice" transaction-manager="txManager">
       	定义规则
       		<tx:attributes>
       			以get开头的方法
       			read-only默认是false，设置为true提高事务查询性能
       			SUPPORTS适用于查询方法，有事务按照事务运行，没有就不按照事务运行
       			<tx:method name="get*" propagation="SUPPORTS" read-only="true" timeout="1000"/>
       			REQUIRED默认值，能满足大多数事务需求
       			<tx:method name="add*" propagation="REQUIRED"/>
       			通配符
       			<tx:method name="*" propagation="REQUIRED"/>
       		</tx:attributes>
       </tx:advice>
       
       针对具体对的方法，适合用于方法较多时使用，直接扫描全部
       <aop:config >
       		service包下所有类及所有子包下所有方法
       		<aop:pointcut expression="execution(* service..*.*(..))" id="myPoint"/>
       		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPoint" />
       </aop:config>
    -->
             
       <!-- 注解的方式配置,配置事务管理器，开启注解，适合方法较少时使用 -->
       <tx:annotation-driven transaction-manager="txManager"/>
</beans>